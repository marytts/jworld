plugins {
    id 'cpp'
    id "java"
    id 'maven-publish'
    id "net.tribe-seven.swig" version "0.1.1"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

dependencies {
    testCompile group: 'org.testng', name: 'testng', version: '6.8.13'
    testCompile group: 'com.google.guava', name: 'guava', version: '18.0'
}

test {
    useTestNG()
    // environment "LD_LIBRARY_PATH": "$buildDir"
    // environment "DYLD_LIBRARY_PATH":  "$buildDir"
}

task generateSrc(type: SwigTask) {
    description "Generate the JNI wrapping necessary files"

    // FIXME
    verbose = true
    enableCpp = true

    // Pathes
    javaSourcesPath = file("$buildDir/generatedSrc/main/java/jworld")
    source = new File("$projectDir/swig/world.i")
    wrapperTargetFile = file("$buildDir/generatedSrc/main/cpp/world_wrap.cpp")
    ext {
        sourceDir = layout.buildDirectory.dir('generatedSrc/main/cpp')
        headerDir = layout.projectDirectory.dir('World/src')
    }

    // Java info
    module = "World"
    packageName = "jworld"
}


sourceSets {
    main {
        java {
            srcDirs += generateSrc.javaSourcesPath
        }
    }
}

compileJava {
    mustRunAfter generateSrc
}

model {
    components {
        world(NativeLibrarySpec) {
            sources {
                generated(CppSourceSet) {
                    generatedBy tasks.generateSrc
                }

                cpp {
                    source {
                        srcDirs 'World/src'
                        include '*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'World/src'
                        include 'world/*.h'
                    }
                }
            }

            binaries {
                all {
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    switch (targetPlatform.operatingSystem) {
                        case { it.macOsX }:
                            cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                            break
                        case { it.linux }:
                            cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                            break
                    }
                }
            }
        }
    }

    tasks {
        processResources {
            dependsOn worldSharedLibrary
            from "${buildDir}/libs/", {
                include '**/libworld.*'
                eachFile {
                    it.path = it.name
                }
                includeEmptyDirs = false
            }
            from 'LICENSE.md', {
                rename { 'LICENSE-jworld.md' }
            }
            from 'World', {
                include 'LICENSE.txt'
                rename { 'LICENSE-world.txt' }
            }
        }
    }
}


/**********************************************************************************************
 ** Project meta + publishing part
 ***********************************************************************************************/
version '0.6-SNAPSHOT'
group "de.dfki.mary"
description "Artifact containing a wrapper for the World vocoder"

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    from 'LICENSE.md', {
        rename { 'LICENSE-jworld.md' }
    }
    from 'World', {
        include 'LICENSE.txt'
        rename { 'LICENSE-world.txt' }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            pom {
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "$rootProject.buildDir/repo"
        }
        maven {
            url version.endsWith('-SNAPSHOT') ? 'https://oss.jfrog.org/artifactory/oss-snapshot-local' : 'https://api.bintray.com/maven/marytts/marytts/jworld'
            credentials {
                username = findProperty('bintrayUser')
                password = findProperty('bintrayApiKey')
            }
        }
    }
}
